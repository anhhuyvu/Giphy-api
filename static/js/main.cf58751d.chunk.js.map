{"version":3,"sources":["api/giphy.js","hook/useInfiniteScroll.jsx","components/gifContainer/GifContainer.jsx","components/spinner/Spinner.jsx","components/fullScreenImage/FullScreenImage.jsx","modules/giphy/Giphy.jsx","App.js","reportWebVitals.js","index.js"],"names":["ENDPOINT","API_KEY","getGifItems","a","offset","axios","params","api_key","limit","result","data","pagination","useInfiniteScroll","page","useState","setData","isLoading","setIsLoading","hasMore","setHasMore","fetchDataByPage","response","prevItem","total_count","useEffect","GifContainer","React","forwardRef","ref","url","title","onclick","className","onClick","src","alt","Spinner","FullScreenImage","isOpen","toggle","handleOnClick","event","container","document","getElementById","isEqualNode","target","addEventListener","removeEventListener","id","Giphy","setPage","lastElementObserver","useRef","overlay","setOverlay","selectedGif","setSelectedGif","lastElementRef","useCallback","element","current","disconnect","IntersectionObserver","items","isIntersecting","prevPage","observe","prevState","map","index","images","downsized","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cf58751d.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const ENDPOINT = ' https://api.giphy.com/v1/gifs/trending';\nexport const API_KEY = 'tBjT70lzwGwkMwG7xZSt91e8qMNkIQ22';\nexport const LIMIT_ITEMS = 20;\n\nexport const getGifItems = async(offset = 0) => {\n  const result =  await axios(ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n      limit: LIMIT_ITEMS,\n      offset: offset,\n    },\n  });\n  const { data, pagination } = result.data;\n  return { data, pagination };\n};\n","import { useState, useEffect } from 'react';\nimport { LIMIT_ITEMS, getGifItems } from '../api/giphy';\n\nconst useInfiniteScroll = (page) => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n\n  const fetchDataByPage = async (page) => {\n    setIsLoading(true);\n    const offset = (page - 1) * LIMIT_ITEMS;\n    const response = await getGifItems(offset);\n\n    const { data, pagination } = response;\n    if (data && pagination) {\n      setData((prevItem) => [...prevItem, ...data]);\n      setIsLoading(false);\n      setHasMore(page < pagination.total_count);\n    }\n  };\n\n  useEffect(() => {\n    fetchDataByPage(page);\n  }, [page]);\n\n  return { isLoading, data, hasMore };\n};\n\nexport default useInfiniteScroll;\n","import React from 'react';\n\nconst GifContainer = React.forwardRef(({ url, title, onclick }, ref) => {\n  return (\n    <div data-testid=\"gif-container-id\" className=\"img-container\" ref={ref} onClick={onclick}>\n      <img src={url} alt={title} />\n    </div>\n  );\n});\n\nexport default GifContainer;\n","import React from 'react';\n\nimport './Spinner.scss';\n\nconst Spinner = () => {\n  return (\n    <div className=\"lds-roller\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useEffect } from 'react';\nimport './FullScreenImage.scss';\n\nconst FullScreenImage = ({ isOpen, url, toggle }) => {\n  useEffect(() => {\n    const handleOnClick = (event) => {\n      const container = document.getElementById('fullscreen-container');\n\n      if (container && container.isEqualNode(event.target)) {\n        toggle();\n      }\n    };\n\n    document.addEventListener('mousedown', handleOnClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleOnClick);\n    };\n  }, [toggle]);\n\n  return (\n    <div className={`fullscreen-container ${isOpen ? 'show' : ''}`} id=\"fullscreen-container\">\n      <img alt={url} src={url} />\n    </div>\n  );\n};\n\nexport default FullScreenImage;\n","import { useCallback, useRef, useState } from 'react';\nimport useInfiniteScroll from '../../hook/useInfiniteScroll';\n\nimport GifContainer from '../../components/gifContainer/GifContainer';\nimport Spinner from '../../components/spinner/Spinner';\nimport FullScreenImage from '../../components/fullScreenImage/FullScreenImage';\n\nimport './Giphy.scss';\n\nconst Giphy = () => {\n  const [page, setPage] = useState(1);\n  const lastElementObserver = useRef(null);\n  const { data, isLoading, hasMore } = useInfiniteScroll(page);\n  const [overlay, setOverlay] = useState(false);\n  const [selectedGif, setSelectedGif] = useState('');\n\n  const lastElementRef = useCallback(\n    (element) => {\n      if (isLoading) return;\n      if (lastElementObserver.current) {\n        lastElementObserver.current.disconnect();\n      }\n      lastElementObserver.current = new IntersectionObserver((items) => {\n        if (items[0].isIntersecting && hasMore) {\n          setPage((prevPage) => prevPage + 1);\n        }\n      });\n\n      if (element) {\n        lastElementObserver.current.observe(element);\n      }\n    },\n    [isLoading, hasMore],\n  );\n  const toggle = () =>\n    setOverlay((prevState) => {\n      if (prevState) {\n        setSelectedGif('');\n      }\n      return !prevState;\n    });\n  const handleOnClick = (url) => {\n    setSelectedGif(url);\n    toggle();\n  };\n\n  return (\n    <div className=\"gif-page-container\">\n      {isLoading && (\n        <div className=\"spinner-container\">\n          <Spinner />\n        </div>\n      )}\n      <h1 className=\"d-flex justify-content-center\">\n        <b>Trending Gifs</b>\n      </h1>\n      <div className=\"giphy-container\">\n        {data.map((items, index) => {\n          const { id, images } = items;\n          const { url, title } = images.downsized;\n          if (data.length - 1 === index) {\n            return (\n              <GifContainer key={id} url={url} title={title} ref={lastElementRef} onclick={() => handleOnClick(url)} />\n            );\n          }\n\n          return <GifContainer key={id} url={url} title={title} onclick={() => handleOnClick(url)} />;\n        })}\n      </div>\n      <FullScreenImage url={selectedGif} isOpen={overlay} toggle={toggle} />\n    </div>\n  );\n};\nexport default Giphy;\n","import Giphy from './modules/giphy/Giphy';\n\nimport './App.css';\n\nfunction App() {\n  return <div><Giphy/></div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}